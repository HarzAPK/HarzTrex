name: T-Rex APK erstellen (ZIP)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: JDK 17 installieren
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Tools installieren
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl

      - name: Android SDK Basis einrichten
        uses: android-actions/setup-android@v3

      - name: SDK-Manager vorbereiten & Lizenzen akzeptieren
        shell: bash
        run: |
          set -e
          SDKROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          SDKMANAGER=""
          for d in "$SDKROOT/cmdline-tools/latest/bin" "$SDKROOT/cmdline-tools/17.0/bin" "$SDKROOT/cmdline-tools/16.0/bin"; do
            if [ -x "$d/sdkmanager" ]; then SDKMANAGER="$d/sdkmanager"; break; fi
          done
          yes | "$SDKMANAGER" --licenses || true
          yes | "$SDKMANAGER" --install "platforms;android-34" "build-tools;34.0.0" "platform-tools" || true

      - name: Gradle 8.7 installieren
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          echo "$HOME/.sdkman/candidates/gradle/8.7/bin" >> $GITHUB_PATH
          gradle --version

      - name: Projekt aus ZIP entpacken
        run: |
          test -f TrexRoarApp_v2.zip || (echo "TrexRoarApp_v2.zip fehlt im Repo-Wurzelordner" && exit 1)
          unzip -o TrexRoarApp_v2.zip -d extracted
          if [ -d "extracted/TrexRoarApp_v2/app" ]; then
            echo "PROJECT_DIR=extracted/TrexRoarApp_v2" >> $GITHUB_ENV
          elif [ -d "extracted/app" ]; then
            echo "PROJECT_DIR=extracted" >> $GITHUB_ENV
          else
            echo "Kein app/-Ordner gefunden"; ls -la extracted; exit 1
          fi

      - name: AndroidX aktivieren
        run: |
          cd "$PROJECT_DIR"
          touch gradle.properties
          sed -i '/^android.useAndroidX/d' gradle.properties || true
          sed -i '/^android.enableJetifier/d' gradle.properties || true
          printf 'android.useAndroidX=true\nandroid.enableJetifier=true\norg.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8\n' >> gradle.properties

      # ---> Fix: namespace + SDK-Level sicher setzen
      - name: Gradle-Konfiguration patchen (namespace/SDK)
        shell: bash
        run: |
          set -e
          APP_DIR="$PROJECT_DIR/app"
          MANIFEST="$APP_DIR/src/main/AndroidManifest.xml"
          GRADLE="$APP_DIR/build.gradle.kts"
          test -f "$GRADLE" || (echo "build.gradle.kts fehlt in app/" && exit 1)
          PKG=$(grep -oP 'package="\K[^"]+' "$MANIFEST" || true)
          # Falls kein package im Manifest, fallback:
          [ -z "$PKG" ] && PKG="com.example.app"
          # namespace eintragen/ersetzen
          if grep -q 'namespace\s*=' "$GRADLE"; then
            sed -i "s/namespace\s*=\s*\"[^\"]*\"/namespace = \"$PKG\"/" "$GRADLE"
          else
            # nach der Zeile 'android {' eine namespace-Zeile einfÃ¼gen
            awk -v ns="$PKG" '
              {print}
              /android\s*\{/ && !done {print "    namespace = \"" ns "\""; done=1}
            ' "$GRADLE" > "$GRADLE.new" && mv "$GRADLE.new" "$GRADLE"
          fi
          # compileSdk/targetSdk auf 34 bringen (falls niedriger/fehlt)
          if grep -q 'compileSdk\s*=' "$GRADLE"; then
            sed -i 's/compileSdk\s*=\s*[0-9]\+/compileSdk = 34/' "$GRADLE"
          else
            awk '
              {print}
              /android\s*\{/ && !done {print "    compileSdk = 34"; done=1}
            ' "$GRADLE" > "$GRADLE.new" && mv "$GRADLE.new" "$GRADLE"
          fi
          if grep -q 'targetSdk\s*=' "$GRADLE"; then
            sed -i 's/targetSdk\s*=\s*[0-9]\+/targetSdk = 34/' "$GRADLE"
          else
            awk '
              BEGIN{ins=0}
              /defaultConfig\s*\{/ {print; print "        targetSdk = 34"; ins=1; next}
              {print}
            ' "$GRADLE" > "$GRADLE.new" && mv "$GRADLE.new" "$GRADLE"
          fi
          echo "==== build.gradle.kts nach Patch ===="
          sed -n '1,200p' "$GRADLE"

      - name: Debug-APK bauen
        run: |
          cd "$PROJECT_DIR"
          gradle :app:assembleDebug --no-daemon --stacktrace

      - name: APK hochladen
        uses: actions/upload-artifact@v4
        with:
          name: trex-debug-apk
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/apk/debug/*.apk
