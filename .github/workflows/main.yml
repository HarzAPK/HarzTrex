name: T-Rex APK erstellen (ZIP)

on:
  workflow_dispatch:
  push:
    paths:
      - "*.zip"
      - ".github/workflows/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: JDK 17 installieren
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Tools installieren (zip/unzip, curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip curl

      - name: Android SDK vorbereiten & Lizenzen akzeptieren
        run: |
          export ANDROID_HOME="$RUNNER_TEMP/android-sdk"
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          cd "$ANDROID_HOME/cmdline-tools"
          curl -L -o sdk.zip "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
          unzip -q sdk.zip
          mv cmdline-tools latest
          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_HOME" --licenses >/dev/null
          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_HOME" \
               "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV

      - name: ZIP-Datei finden
        id: findzip
        run: |
          shopt -s nullglob
          files=( *.zip )
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::Keine ZIP-Datei im Repo gefunden."
            exit 1
          fi
          ZIP=""
          for f in "${files[@]}"; do
            if [[ "$f" == TrexRoarApp_*.zip ]]; then ZIP="$f"; break; fi
          done
          if [ -z "$ZIP" ]; then ZIP="${files[0]}"; fi
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"

      - name: ZIP entpacken
        run: |
          DEST="$RUNNER_TEMP/appsrc"
          mkdir -p "$DEST"
          unzip -q "${{ steps.findzip.outputs.zip }}" -d "$DEST"

      - name: Projektordner finden
        id: findproj
        run: |
          ROOT="$RUNNER_TEMP/appsrc"
          if GRADLEW="$(find "$ROOT" -type f -name "gradlew" | head -n1)"; then
            echo "has_wrapper=true" >> "$GITHUB_OUTPUT"
            echo "project_dir=$(dirname "$GRADLEW")" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if SETTINGS="$(find "$ROOT" -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" \) | head -n1)"; then
            echo "has_wrapper=false" >> "$GITHUB_OUTPUT"
            echo "project_dir=$(dirname "$SETTINGS")" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "::error::Kein Android-Projekt gefunden!"
          exit 1

      - name: SDK Pfad in local.properties setzen
        run: |
          echo "sdk.dir=$ANDROID_HOME" > "${{ steps.findproj.outputs.project_dir }}/local.properties"

      - name: Falls nÃ¶tig Gradle CLI installieren
        if: steps.findproj.outputs.has_wrapper == 'false'
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          echo "$HOME/.sdkman/candidates/gradle/current/bin" >> $GITHUB_PATH
          gradle -v

      - name: Debug-APK bauen
        working-directory: ${{ steps.findproj.outputs.project_dir }}
        run: |
          if [ "${{ steps.findproj.outputs.has_wrapper }}" = "true" ]; then
            chmod +x ./gradlew
            ./gradlew --version
            ./gradlew assembleDebug
          else
            gradle --version
            gradle assembleDebug
          fi

      - name: APK hochladen
        uses: actions/upload-artifact@v4
        with:
          name: trex-debug-apk
          path: ${{ steps.findproj.outputs.project_dir }}/**/build/outputs/**/*.apk
          if-no-files-found: error
