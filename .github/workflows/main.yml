name: T-Rex APK erstellen (ZIP)

on:
  # 1) Manuell starten möglich
  workflow_dispatch:
  # 2) Automatisch starten bei Änderungen an ZIP oder Workflow-Dateien
  push:
    paths:
      - 'TrexRoarApp_*.zip'
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: JDK 17 installieren
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Android SDK vorbereiten & Lizenzen akzeptieren
        shell: bash
        run: |
          set -e
          yes | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses || true
          sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: ZIP entpacken
        run: unzip -o TrexRoarApp_v2.zip

      - name: Projektordner automatisch finden (gradlew oder settings.gradle)
        id: findproj
        shell: bash
        run: |
          set -e
          GRADLEW_PATH="$(find . -type f -name gradlew | head -n1 || true)"
          if [ -n "$GRADLEW_PATH" ]; then
            PROJECT_DIR="$(dirname "$GRADLEW_PATH")"
            echo "BUILD_TOOL=wrapper" >> $GITHUB_ENV
            echo "PROJECT_DIR=$PROJECT_DIR" >> $GITHUB_ENV
            echo "Gefunden: gradlew in $PROJECT_DIR"
            exit 0
          fi

          SETTINGS_DIR="$(find . -type f \( -name settings.gradle -o -name settings.gradle.kts \) -printf '%h\n' | head -n1 || true)"
          if [ -z "$SETTINGS_DIR" ]; then
            SETTINGS_DIR="$(find . -type f \( -name build.gradle -o -name build.gradle.kts \) -printf '%h\n' | head -n1 || true)"
          fi

          if [ -z "$SETTINGS_DIR" ]; then
            echo "Kein gradlew und kein settings.gradle/build.gradle gefunden. ZIP-Inhalt (Top-Ebene):"
            ls -la
            exit 1
          fi

          echo "BUILD_TOOL=gradle_cli" >> $GITHUB_ENV
          echo "PROJECT_DIR=$SETTINGS_DIR" >> $GITHUB_ENV
          echo "Gefunden: Gradle-Projekt in $SETTINGS_DIR (ohne gradlew)"

      - name: Falls nötig: Gradle 8.7 installieren (SDKMAN)
        if: env.BUILD_TOOL == 'gradle_cli'
        shell: bash
        run: |
          set -e
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          gradle -v

      - name: Debug-APK bauen (Wrapper oder Gradle CLI)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          if [ "${BUILD_TOOL}" = "wrapper" ]; then
            chmod +x gradlew
            ./gradlew --version
            ./gradlew assembleDebug
          else
            gradle --version
            gradle assembleDebug
          fi

      - name: APK hochladen
        uses: actions/upload-artifact@v4
        with:
          name: trex-debug-apk
          path: |
            ${{ env.PROJECT_DIR }}/app/build/outputs/apk/debug/*.apk
            ${{ env.PROJECT_DIR }}/**/build/outputs/apk/debug/*.apk
          if-no-files-found: error
