name: T-Rex APK erstellen (ZIP, robust)

on:
  workflow_dispatch:
  push:
    paths:
      - "TrexRoarApp_*.zip"
      - ".github/workflows/**"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      JAVA_DISTRIBUTION: temurin
      JAVA_VERSION: "17"

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java 17 installieren
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Tools installieren (unzip, curl, jq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip curl jq

      - name: ZIP-Datei finden
        id: findzip
        shell: bash
        run: |
          set -euo pipefail
          ZIP_FILE="$(ls -1 TrexRoarApp_*.zip 2>/dev/null | head -n1 || true)"
          if [[ -z "$ZIP_FILE" ]]; then
            echo "❌ Keine ZIP-Datei 'TrexRoarApp_*.zip' im Repo gefunden." >&2
            exit 1
          fi
          echo "zip=$ZIP_FILE" >> "$GITHUB_OUTPUT"
          echo "✅ Gefunden: $ZIP_FILE"

      - name: ZIP entpacken
        id: unzip
        shell: bash
        run: |
          set -euo pipefail
          rm -rf app_src
          mkdir -p app_src
          unzip -q "${{ steps.findzip.outputs.zip }}" -d app_src
          echo "✅ Entpackt nach app_src"

      - name: Projekt + Build-Infos erkennen
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Finde den Projektordner (enthält build.gradle(.kts) auf Root-Ebene)
          PROJECT_DIR="$(dirname "$(find app_src -maxdepth 2 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \) | head -n1)")"
          if [[ -z "$PROJECT_DIR" ]]; then
            echo "❌ Keine build.gradle(.kts) im entpackten ZIP gefunden." >&2
            exit 1
          fi
          echo "project_dir=$PROJECT_DIR" >> "$GITHUB_OUTPUT"
          echo "✅ Projektordner: $PROJECT_DIR"

          # Prüfe auf Gradle Wrapper
          if [[ -x "$PROJECT_DIR/gradlew" ]]; then
            echo "has_wrapper=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_wrapper=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Android SDK vorbereiten & Lizenzen akzeptieren
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"

          # Commandline-Tools laden
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -o cmdtools.zip

          # Korrekt entpacken: Inhalt in .../cmdline-tools/latest/ verschieben
          rm -rf cmdline-tools
          mkdir -p cmdline-tools latest_tmp
          unzip -q cmdtools.zip -d latest_tmp
          mkdir -p cmdline-tools/latest
          mv latest_tmp/cmdline-tools/* cmdline-tools/latest/
          rm -rf latest_tmp cmdtools.zip

          # PATH für nachfolgende Schritte persistent erweitern
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"

          # Lizenzen akzeptieren & Pakete installieren
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: SDK Pfad in local.properties setzen
        shell: bash
        run: |
          set -euo pipefail
          PROJ="${{ steps.detect.outputs.project_dir }}"
          echo "sdk.dir=${ANDROID_SDK_ROOT}" > "${PROJ}/local.properties"
          echo "✅ local.properties geschrieben: sdk.dir=${ANDROID_SDK_ROOT}"

      - name: Falls nötig Gradle CLI installieren
        if: steps.detect.outputs.has_wrapper == 'false'
        uses: gradle/actions/setup-gradle@v4

      - name: Debug-APK bauen
        shell: bash
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          set -euo pipefail
          if [[ -x "./gradlew" ]]; then
            echo "➡️  Baue mit Gradle Wrapper"
            chmod +x ./gradlew
            ./gradlew --no-daemon --stacktrace assembleDebug
          else
            echo "ℹ️  Kein Wrapper gefunden – nutze Gradle CLI"
            gradle --no-daemon --stacktrace assembleDebug
          fi

      - name: APK hochladen
        uses: actions/upload-artifact@v4
        with:
          name: trex-debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/*.apk
          if-no-files-found: error
