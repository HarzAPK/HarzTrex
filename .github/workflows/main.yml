name: T-Rex APK erstellen (ZIP, robust)

on:
  workflow_dispatch:
  push:
    paths:
      - "**/*.zip"
      - ".github/workflows/**"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_GLOB: "*.zip"   # ggf. anpassen (z.B. TrexRoarApp_*.zip)

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java 17 installieren
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Grundpfade setzen (aus RUNNER_TEMP)
        run: |
          echo "UNZIP_DIR=${RUNNER_TEMP}/unz" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=${RUNNER_TEMP}/android-sdk" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=${RUNNER_TEMP}/android-sdk" >> "$GITHUB_ENV"

      - name: Tools installieren (unzip, curl, jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl jq

      - name: ZIP-Datei finden
        id: findzip
        run: |
          set -e
          shopt -s nullglob
          files=( $ZIP_GLOB )
          if [ ${#files[@]} -eq 0 ]; then
            echo "Kein ZIP im Repo gefunden (Muster: $ZIP_GLOB)." >&2
            exit 1
          fi
          newest="$(ls -1t "${files[@]}" | head -n1)"
          echo "ZIP=${newest}" | tee -a "$GITHUB_OUTPUT"

      - name: ZIP entpacken
        run: |
          set -e
          mkdir -p "$UNZIP_DIR"
          unzip -q "${{ steps.findzip.outputs.ZIP }}" -d "$UNZIP_DIR"
          echo "Entpackt nach: $UNZIP_DIR"
          find "$UNZIP_DIR" -maxdepth 2 -type d -print

      - name: Projekt + Build-Infos erkennen
        id: probe
        run: |
          set -e
          proj_dir="$(find "$UNZIP_DIR" -type f -name gradlew -printf '%h\n' | sort -u | head -n1 || true)"
          if [ -z "$proj_dir" ]; then
            proj_dir="$(find "$UNZIP_DIR" -type f \( -name 'settings.gradle' -o -name 'settings.gradle.kts' -o -name 'build.gradle' -o -name 'build.gradle.kts' \) -printf '%h\n' | sort -u | head -n1 || true)"
          fi
          if [ -z "$proj_dir" ]; then
            echo "Konnte keinen Android-Projektordner finden." >&2
            exit 1
          fi
          echo "PROJECT_DIR=$proj_dir" >> "$GITHUB_ENV"
          if [ -f "$proj_dir/gradlew" ]; then
            echo "HAS_WRAPPER=true" >> "$GITHUB_ENV"
          else
            echo "HAS_WRAPPER=false" >> "$GITHUB_ENV"
          fi
          echo "Gefundenes Projekt: $proj_dir"

      - name: Android SDK vorbereiten & Lizenzen akzeptieren
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -o cmdtools.zip
          mkdir -p cmdline-tools/latest
          unzip -q cmdtools.zip -d cmdline-tools/latest
          rm cmdtools.zip
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: SDK Pfad in local.properties setzen
        run: |
          set -e
          echo "sdk.dir=${ANDROID_SDK_ROOT}" > "${PROJECT_DIR}/local.properties"
          cat "${PROJECT_DIR}/local.properties"

      - name: Falls n√∂tig Gradle CLI installieren
        if: env.HAS_WRAPPER == 'false'
        run: |
          set -e
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          gradle -v

      - name: Debug-APK bauen
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          if [ "${HAS_WRAPPER}" = "true" ]; then
            chmod +x ./gradlew
            ./gradlew --no-daemon assembleDebug
          else
            gradle --no-daemon assembleDebug
          fi

      - name: APK hochladen
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trex-debug-apk
          path: |
            ${{ env.PROJECT_DIR }}/**/outputs/apk/**/**/*.apk
          if-no-files-found: warn
